name: spack updater action release check
description: Check for updated releases
inputs:
  token:
    description: GitHub token
    required: true
  test_build:
    description: test the build of the package
    required: false
    default: true
  pull_request:
    description: open a pull request if a new release is found
    required: false
    default: true
  package:
    description: name of package in packages folder
    required: true
  repo:
    description: repository with package releases, can be derived from package url
    required: false
  dry_run:
    description: don't update the file (dry run only)
    required: false
    default: false
  branch:
    description: branch to open pull request to
    required: false
    default: main
  fortran:
    description: install fortran compiler
    required: false
    default: false
  compiler:
    description: set a default compiler (only used if fortran set)
    required: false
    default: "gcc@11.3.0"


outputs:
  version:
    description: New version
    value: ${{ steps.check.outputs.version }}
  package:
    description: Package with version (to install or test build)
    value: ${{ steps.check.outputs.package }}
  digest:
    description: Digest of new release
    value: ${{ steps.check.outputs.digest }}

runs:
  using: composite
  steps:
  - name: Check for New Releases
    id: check
    env:
      package: ${{ inputs.package }}
      repo: ${{ inputs.repo }}
      dry_run: ${{ inputs.dry_run }}
      GITHUB_TOKEN: ${{ inputs.token }}
      action_path: ${{ github.action_path }}
    run: |
      cmd="python ${action_path}/scripts/get_releases.py"
      if [ "${repo}" != "" ]; then
          cmd="${cmd} --repo ${repo}"
      fi
      if [ "${dry_run}" == "true" ]; then
          cmd="${cmd} --dry-run"
      fi
      cmd="${cmd} packages/${package}"
      printf "${cmd}\n"
      $cmd
    shell: bash

  - name: Install GNU Fortran
    if: (inputs.fortran == 'true')
    uses: modflowpy/install-gfortran-action@d1979765a1a46c10711ce70197feb669085e1fd7 # v1.0.1

  - name: Link Gfortran Compiler
    if: (inputs.fortran == 'true' || inputs.fortran == true)
    run: sudo ln -fs /usr/local/bin/gfortran-10 /usr/local/bin/gfortran-12
    shell: bash

  - name: Install Spack
    run: |
      git clone --depth 1 https://github.com/spack/spack /opt/spack
      echo "/opt/spack/bin" >> $GITHUB_PATH
      export PATH="/opt/spack/bin:$PATH"
      # spack external find
    shell: bash

  - name: View Compilers
    if: (inputs.fortran == 'true' || inputs.fortran == true)
    env:
      compiler: ${{ inputs.compiler }}
    run: |
      spack config add "packages:all:compiler:[${compiler}]"
      spack compiler find
      spack compiler list
    shell: bash
    
  - name: Derive Microarchitecture
    if: (steps.check.outputs.version != '' && inputs.test_build == 'true')
    run: |
      pip install archspec
      pip install setuptools || true
      runner_cpu=$(archspec cpu)
      echo "runner_cpu=${runner_cpu}" >> $GITHUB_ENV
    shell: bash

  - name: Derive Package Install Name
    env:
      package: ${{ inputs.package }}
    run: |
      package_name="${package/-/_}"
      echo "Package install name is $package_name"
      echo "package_install_name=${package_name}" >> $GITHUB_ENV      
    shell: bash

  # Currently pakages is disabled debugging cache
  - name: ${{ inputs.package }} Spack Build
    if: (inputs.test_build == 'true' || inputs.test_build == true)
    shell: bash
    run: |
      SPACK_ROOT=$(dirname $(dirname $(which spack)))
      echo "Found SPACK_ROOT ${SPACK_ROOT}"
      echo "cp ./packages/${{ inputs.package }}/* $SPACK_ROOT/var/spack/repos/spack_repo/builtin/packages/${{ inputs.package }}"
      cp ./packages/${{ inputs.package }}/* $SPACK_ROOT/var/spack/repos/spack_repo/builtin/packages/${{ inputs.package }}
      spack install ${{ env.package_install_name }}

  - name: Commit latest release version
    if: (steps.check.outputs.version != '' && inputs.test_build == 'true' && inputs.pull_request
      == 'true')
    env:
      package: ${{ inputs.package }}
      version: ${{ steps.check.outputs.version }}
      GITHUB_TOKEN: ${{ inputs.token }}
    run: |
      echo "Found new version ${version}"
      echo "::group::${package} package.py"
      cat packages/${package}/package.py
      echo "::endgroup::"      
      export BRANCH_FROM="release/${package}-${version}"
      git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
      git branch
      git checkout -b "${BRANCH_FROM}" || git checkout "${BRANCH_FROM}"
      git branch
      git config --global user.name "github-actions"
      git config --global user.email "github-actions@users.noreply.github.com"
      git config --global pull.rebase true
      git add packages/*
      if git diff-index --quiet HEAD --; then
          printf "No changes\n"
      else
         printf "Changes\n"
         today=$(date '+%Y-%m-%d')
         git commit -a -m "Automated deployment to update ${package} versions ${today}" -m "Signed-off-by: github-actions <github-actions@users.noreply.github.com>"  
         git push origin "${BRANCH_FROM}"
      fi
      echo "PULL_REQUEST_FROM_BRANCH=${BRANCH_FROM}" >> $GITHUB_ENV
    shell: bash

  - name: Open Pull Request
    if: (steps.check.outputs.version != '' && inputs.test_build == 'true' && inputs.pull_request == 'true')
    uses: vsoch/pull-request-action@master
    env:
      GITHUB_TOKEN: ${{ inputs.token }}
      PULL_REQUEST_BRANCH: ${{ inputs.branch }}
